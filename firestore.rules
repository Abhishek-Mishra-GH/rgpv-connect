
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users:
    // - Anyone can create their own user profile on signup.
    // - Users can only read and update their own profile.
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    // Questions:
    // - Anyone can read questions.
    // - Authenticated users can create questions.
    // - Only the author can update/delete their question, but anyone can vote.
    match /questions/{questionId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        // Case 1: The user is the author, they can edit anything
        (resource.data.author.id == request.auth.uid) ||
        // Case 2: Any logged-in user can upvote or downvote
        (request.resource.data.upvotes == resource.data.upvotes + 1 ||
         request.resource.data.upvotes == resource.data.upvotes - 1)
      );
      allow delete: if request.auth != null && resource.data.author.id == request.auth.uid;
    }

    // Answers:
    // - Answers can be read by anyone (as part of a question).
    // - Authenticated users can create/post answers.
    // - Only the author can update/delete their answer, but anyone can vote.
    match /answers/{answerId} {
      allow read, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        // Case 1: The user is the author, they can edit anything
        (resource.data.author.id == request.auth.uid) ||
        // Case 2: Any logged-in user can upvote or downvote
        (request.resource.data.upvotes == resource.data.upvotes + 1 ||
         request.resource.data.upvotes == resource.data.upvotes - 1)
      );
      allow delete: if request.auth != null && resource.data.author.id == request.auth.uid;
    }
  }
}
